AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'query-ap Sample SAM Template for query-api

  '
Parameters:
  DynamoEndpoint:
    Type: String
    Default: cloud
    AllowedValues:
    - http://dynamo-local:8000
    - cloud
    Description: http://dynamo-local:8000, cloud
Globals:
  Function:
    Timeout: 3
Resources:
  ArticlesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: ArticlesApi
      DefinitionUri: s3://dakobed-serverless-apis/b0f046eec2fed8a68afdc12f25b09e43
  ArticlesScanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ArticlesScanFunction
      CodeUri: s3://dakobed-serverless-apis/ba2e4c44237eea7b42649299db0fe42f
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBReadPolicy:
          TableName: Articles
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ArticlesApi
            Path: /articles
            Method: get
  PostArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostArticleFunction
      CodeUri: s3://dakobed-serverless-apis/d7270b09b733d6812677c6a859297120
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Articles
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ArticlesApi
            Path: /articles
            Method: put
  ArticleDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ArticleDetailFunction
      CodeUri: s3://dakobed-serverless-apis/c22176a89896c8a3e10a1c49f21a52f6
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBReadPolicy:
          TableName: Articles
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ArticlesApi
            Path: /articles/detail/{article_id}/{article_date}
            Method: get
  ArticleUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ArticleUpdateFunction
      CodeUri: s3://dakobed-serverless-apis/4f3845afa2e80209971c11cdb3406cb7
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBReadPolicy:
          TableName: Articles
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ArticlesApi
            Path: /articles/detail/{article_id}/{article_date}
            Method: put
  DeleteArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteArticleFunction
      CodeUri: s3://dakobed-serverless-apis/2413c29828a8efc6387bad291cbd8ce5
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Articles
      Events:
        DeleteArticle:
          Type: Api
          Properties:
            RestApiId:
              Ref: ArticlesApi
            Path: /articles/detail/{article_id}/{article_date}
            Method: delete
  PortfolioDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PortfolioDetailFunction
      CodeUri: s3://dakobed-serverless-apis/f8215bad5b6101f5d24aeec2bdfd1b29
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBReadPolicy:
          TableName: PortfolioArticles
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ArticlesApi
            Path: /portfolio/detail/{article_category}/{article_name}
            Method: get
Outputs:
  ArticlesApi:
    Value:
      Fn::Sub: https://${ArticlesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - ArticlesApi
